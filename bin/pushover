#!/bin/bash

USER=""
TOKEN=""
TITLE=""
MESSAGE=""
HTML=""
PRIORITY="0"
RETRY="60"
EXPIRE="86400"
VERSION="1.0.7"
REPO="git@github.com:aaronfagan/pushover-cli.git"
DIR_CONFIG="$HOME/.pushover"

configure() {
	echo -ne '\033[0;37m'
	if [ -n "$CONFIGURE" ] && [ $CONFIGURE == "delete" ]; then
		rm -rf $DIR_CONFIG
		echo -ne "\nPushover CLI configuration deleted.\n\n"
		echo -ne '\033[0m'
		exit 0
	fi
	if [ -e $DIR_CONFIG/config ]; then
	    USER_KEY=$(awk -F'"' '/^USER_KEY=/ {print $2}' $DIR_CONFIG/config)
	    APP_TOKEN=$(awk -F'"' '/^APP_TOKEN=/ {print $2}' $DIR_CONFIG/config)
	    echo -ne "\nUser Key [$USER_KEY]: "
		read USER_KEY
		echo -ne "Application API Token [$APP_TOKEN]: "
		read APP_TOKEN
	else
		echo -ne "\nUser Key: "
		read USER_KEY
		echo -ne "Application API Token: "
		read APP_TOKEN
		if [ ! -d $DIR_CONFIG ]; then mkdir $DIR_CONFIG; fi
		if [ -e $DIR_CONFIG/config ]; then touch $DIR_CONFIG/config; fi
	fi
	cat <<EOF > $DIR_CONFIG/config
USER_KEY="$USER_KEY"
APP_TOKEN="$APP_TOKEN"
EOF
	chmod 600 $DIR_CONFIG/config
	echo -ne "\nPushover CLI configured successfully.\n\n"
	echo -ne '\033[0m'
}
upgrade() {
	DIR_TEMP=/tmp/pushover-cli
	if [ -z "$UPGRADE" ]; then UPGRADE="master"; fi
	echo -ne '\033[0;37m'
	echo -ne "\nDownloading latest version..."
	git clone --branch $UPGRADE --depth 1 $REPO $DIR_TEMP --quiet > /dev/null 2>&1
	if [ $? == 0 ]; then
		echo -ne "done!"
		find $DIR_TEMP -type f -name "upgrade.sh" -exec chmod +x {} \; -exec bash {} $DIR_TEMP \;
		rm -rf $DIR_TEMP
		echo -ne '\033[0m'
		exit 0
	else
		rm -rf $DIR_TEMP
		echo -ne "failed!\n"
		echo -ne "\nPushover CLI upgrade failed.\n\n"
		echo -ne '\033[0m'
		exit 1
	fi
}
version() {
	echo -ne "\033[0;37m
Pushover CLI - v$VERSION
https://github.com/aaronfagan/pushover-cli
By Aaron Fagan (https://www.aaronfagan.ca/)
\033[0m\n"
}
usage() {
	echo "
Usage:
	pushover [options]
Options:
	--user 				Pushover user key. REQUIRED.
	--token 			Pushover application API token. REQUIRED.
	--title 			Notification title.
	--message 			Notification message. REQUIRED.
	--html 				Enabled HTML message. Set to 1 to enable. See: https://pushover.net/api#html.
	--priority 			Message priority, see: https://pushover.net/api#priority. DEFAULT = $PRIORITY.
	--retry 			How many seconds between retries. Only applies when --priority is set to 2 (emergency). DEFAULT = $RETRY.
	--expire 			How many seconds until emergency notification retries will stop. Only applies when --priority is set to 2 (emergency). DEFAULT = $EXPIRE.
	--configure 			Configure global Pushover user key and application API token. Set to 'delete' to remove configuration files.
	--upgrade 			Upgrade to the latest version of Pushover CLI.
	--version 			Currently installed version of Pushover CLI.
	--help 				Usage instructions.
Example:
	pushover \\
	--user YOUR_USER_KEY \\
	--token YOUR_APP_TOKEN \\
	--title \"Test Notification\" \\
	--message \"Here is the notification!\"
	"
}

while [[ $# -gt 0 ]]; do
	key="$1"
	case $key in
		--token)
			TOKEN="${2:-$TOKEN}"
			shift
			shift
		;;
		--user)
			USER="${2:-$USER}"
			shift
			shift
		;;
		--title)
			TITLE="${2:-$TITLE}"
			shift
			shift
		;;
		--message)
			MESSAGE="${2:-$MESSAGE}"
			shift
			shift
		;;
		--html)
			HTML="${2:-$HTML}"
			shift
			shift
		;;
		--priority)
			PRIORITY="${2:-$PRIORITY}"
			shift
			shift
		;;
		--retry)
			RETRY="${2:-$RETRY}"
			shift
			shift
		;;
		--expire)
			EXPIRE="${2:-$EXPIRE}"
			shift
			shift
		;;
		--configure)
			CONFIGURE="${2:-$CONFIGURE}"
			configure
			exit 0
		;;
		--upgrade)
			UPGRADE="${2:-$UPGRADE}"
			upgrade
		;;
		-v | --version)
			version
			exit 0
		;;
		--help)
			usage
			exit 0
		;;
		*) 
			INVALID+=("$1")
			shift
			echo -ne "\033[0;31m\nERROR:\033[0;37m Invalid arguement: $INVALID\033[0m\n"
			usage
			exit 1
		;;
	esac
done

if [ -z "$USER" ] || [ -z "$TOKEN" ] || [ -z "$MESSAGE" ]; then
	echo -ne '\n'
	if [ -z "$USER" ]; then 
		if [ -e $DIR_CONFIG/config ]; then
		    USER=$(awk -F'"' '/^USER_KEY=/ {print $2}' $DIR_CONFIG/config)
		    if [ -z "$USER" ]; then
		    	echo -ne "\033[0;31mERROR:\033[0;37m --user arguement is required.\033[0m\n"
		    fi
		else
			echo -ne "\033[0;31mERROR:\033[0;37m --user arguement is required.\033[0m\n"
		fi
	fi
	if [ -z "$TOKEN" ]; then
		if [ -e $DIR_CONFIG/config ]; then
		    TOKEN=$(awk -F'"' '/^APP_TOKEN=/ {print $2}' $DIR_CONFIG/config)
		    if [ -z "$TOKEN" ]; then
		    	echo -ne "\033[0;31mERROR:\033[0;37m --token arguement is required.\033[0m\n"
		    fi
		else
			echo -ne "\033[0;31mERROR:\033[0;37m --token arguement is required.\033[0m\n"
		fi
	fi
	if [ -z "$MESSAGE" ]; then echo -ne "\033[0;31mERROR:\033[0;37m --message arguement is required.\033[0m\n"; fi
fi

if [ -z "$USER" ] || [ -z "$TOKEN" ] || [ -z "$MESSAGE" ]; then
	usage
	exit 1
else
	echo -ne '\033[0;37m'
	echo -ne "> Sending notification..."
	/usr/bin/curl -s \
		-F "token=${TOKEN}" \
		-F "user=${USER}" \
		-F "title=${TITLE}" \
		-F "priority=${PRIORITY}" \
		-F "retry=${RETRY}" \
		-F "expire=${EXPIRE}" \
		-F "message=${MESSAGE}" \
		https://api.pushover.net/1/messages.json \
	| grep 'errors' > /dev/null 2>&1
	if [ $? != 0 ];	then 
		echo -ne "success!\n\n";
		echo -ne '\033[0m'
		exit 0
	else
		echo -ne "failed!\n\n";
		echo -ne '\033[0m'
		exit 1;
	fi
fi
